// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/emsihyo/go.im/comps/pr/message.proto

/*
	Package pr is a generated protocol buffer package.

	It is generated from these files:
		github.com/emsihyo/go.im/comps/pr/message.proto

	It has these top-level messages:
		ReqLogin
		RespLogin
		ReqLogout
		RespLogout
		ReqSubscribe
		RespSubscribe
		ReqUnsubscribe
		RespUnsubscribe
		EmitSend
		ReqDeliver
		RespDeliver
		ReqPing
		RespPing
		Consumer
		Topic
		Message
*/
package pr

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Err int32

const (
	Err_UserIDWrong   Err = 0
	Err_PasswordWrong Err = 1
	Err_NotLogin      Err = 2
)

var Err_name = map[int32]string{
	0: "UserIDWrong",
	1: "PasswordWrong",
	2: "NotLogin",
}
var Err_value = map[string]int32{
	"UserIDWrong":   0,
	"PasswordWrong": 1,
	"NotLogin":      2,
}

func (x Err) String() string {
	return proto.EnumName(Err_name, int32(x))
}
func (Err) EnumDescriptor() ([]byte, []int) { return fileDescriptorMessage, []int{0} }

type Type int32

const (
	Type_Ping        Type = 0
	Type_Login       Type = 1
	Type_Logout      Type = 2
	Type_Subscribe   Type = 3
	Type_Unsubscribe Type = 4
	Type_Send        Type = 5
	Type_Deliver     Type = 6
)

var Type_name = map[int32]string{
	0: "Ping",
	1: "Login",
	2: "Logout",
	3: "Subscribe",
	4: "Unsubscribe",
	5: "Send",
	6: "Deliver",
}
var Type_value = map[string]int32{
	"Ping":        0,
	"Login":       1,
	"Logout":      2,
	"Subscribe":   3,
	"Unsubscribe": 4,
	"Send":        5,
	"Deliver":     6,
}

func (x Type) String() string {
	return proto.EnumName(Type_name, int32(x))
}
func (Type) EnumDescriptor() ([]byte, []int) { return fileDescriptorMessage, []int{1} }

type ReqLogin struct {
	UserID   string `protobuf:"bytes,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=Password,proto3" json:"Password,omitempty"`
	Platform string `protobuf:"bytes,3,opt,name=Platform,proto3" json:"Platform,omitempty"`
}

func (m *ReqLogin) Reset()                    { *m = ReqLogin{} }
func (*ReqLogin) ProtoMessage()               {}
func (*ReqLogin) Descriptor() ([]byte, []int) { return fileDescriptorMessage, []int{0} }

func (m *ReqLogin) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *ReqLogin) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *ReqLogin) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

type RespLogin struct {
	Code int32  `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Desc string `protobuf:"bytes,2,opt,name=Desc,proto3" json:"Desc,omitempty"`
}

func (m *RespLogin) Reset()                    { *m = RespLogin{} }
func (*RespLogin) ProtoMessage()               {}
func (*RespLogin) Descriptor() ([]byte, []int) { return fileDescriptorMessage, []int{1} }

func (m *RespLogin) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *RespLogin) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

type ReqLogout struct {
}

func (m *ReqLogout) Reset()                    { *m = ReqLogout{} }
func (*ReqLogout) ProtoMessage()               {}
func (*ReqLogout) Descriptor() ([]byte, []int) { return fileDescriptorMessage, []int{2} }

type RespLogout struct {
	Code int32  `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Desc string `protobuf:"bytes,2,opt,name=Desc,proto3" json:"Desc,omitempty"`
}

func (m *RespLogout) Reset()                    { *m = RespLogout{} }
func (*RespLogout) ProtoMessage()               {}
func (*RespLogout) Descriptor() ([]byte, []int) { return fileDescriptorMessage, []int{3} }

func (m *RespLogout) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *RespLogout) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

type ReqSubscribe struct {
	TopicID  string `protobuf:"bytes,1,opt,name=TopicID,proto3" json:"TopicID,omitempty"`
	MinSID   int64  `protobuf:"varint,2,opt,name=MinSID,proto3" json:"MinSID,omitempty"`
	MaxCount int64  `protobuf:"varint,3,opt,name=MaxCount,proto3" json:"MaxCount,omitempty"`
}

func (m *ReqSubscribe) Reset()                    { *m = ReqSubscribe{} }
func (*ReqSubscribe) ProtoMessage()               {}
func (*ReqSubscribe) Descriptor() ([]byte, []int) { return fileDescriptorMessage, []int{4} }

func (m *ReqSubscribe) GetTopicID() string {
	if m != nil {
		return m.TopicID
	}
	return ""
}

func (m *ReqSubscribe) GetMinSID() int64 {
	if m != nil {
		return m.MinSID
	}
	return 0
}

func (m *ReqSubscribe) GetMaxCount() int64 {
	if m != nil {
		return m.MaxCount
	}
	return 0
}

type RespSubscribe struct {
	Code      int32      `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Desc      string     `protobuf:"bytes,2,opt,name=Desc,proto3" json:"Desc,omitempty"`
	Histories []*Message `protobuf:"bytes,3,rep,name=histories" json:"histories,omitempty"`
}

func (m *RespSubscribe) Reset()                    { *m = RespSubscribe{} }
func (*RespSubscribe) ProtoMessage()               {}
func (*RespSubscribe) Descriptor() ([]byte, []int) { return fileDescriptorMessage, []int{5} }

func (m *RespSubscribe) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *RespSubscribe) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *RespSubscribe) GetHistories() []*Message {
	if m != nil {
		return m.Histories
	}
	return nil
}

type ReqUnsubscribe struct {
	TopicID string `protobuf:"bytes,1,opt,name=TopicID,proto3" json:"TopicID,omitempty"`
}

func (m *ReqUnsubscribe) Reset()                    { *m = ReqUnsubscribe{} }
func (*ReqUnsubscribe) ProtoMessage()               {}
func (*ReqUnsubscribe) Descriptor() ([]byte, []int) { return fileDescriptorMessage, []int{6} }

func (m *ReqUnsubscribe) GetTopicID() string {
	if m != nil {
		return m.TopicID
	}
	return ""
}

type RespUnsubscribe struct {
	Code int32  `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Desc string `protobuf:"bytes,2,opt,name=Desc,proto3" json:"Desc,omitempty"`
}

func (m *RespUnsubscribe) Reset()                    { *m = RespUnsubscribe{} }
func (*RespUnsubscribe) ProtoMessage()               {}
func (*RespUnsubscribe) Descriptor() ([]byte, []int) { return fileDescriptorMessage, []int{7} }

func (m *RespUnsubscribe) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *RespUnsubscribe) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

type EmitSend struct {
	Message *Message `protobuf:"bytes,1,opt,name=Message" json:"Message,omitempty"`
}

func (m *EmitSend) Reset()                    { *m = EmitSend{} }
func (*EmitSend) ProtoMessage()               {}
func (*EmitSend) Descriptor() ([]byte, []int) { return fileDescriptorMessage, []int{8} }

func (m *EmitSend) GetMessage() *Message {
	if m != nil {
		return m.Message
	}
	return nil
}

type ReqDeliver struct {
	Message *Message `protobuf:"bytes,1,opt,name=Message" json:"Message,omitempty"`
}

func (m *ReqDeliver) Reset()                    { *m = ReqDeliver{} }
func (*ReqDeliver) ProtoMessage()               {}
func (*ReqDeliver) Descriptor() ([]byte, []int) { return fileDescriptorMessage, []int{9} }

func (m *ReqDeliver) GetMessage() *Message {
	if m != nil {
		return m.Message
	}
	return nil
}

type RespDeliver struct {
	Code int32  `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Desc string `protobuf:"bytes,2,opt,name=Desc,proto3" json:"Desc,omitempty"`
	SID  int64  `protobuf:"varint,3,opt,name=SID,proto3" json:"SID,omitempty"`
	At   int64  `protobuf:"varint,4,opt,name=At,proto3" json:"At,omitempty"`
}

func (m *RespDeliver) Reset()                    { *m = RespDeliver{} }
func (*RespDeliver) ProtoMessage()               {}
func (*RespDeliver) Descriptor() ([]byte, []int) { return fileDescriptorMessage, []int{10} }

func (m *RespDeliver) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *RespDeliver) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *RespDeliver) GetSID() int64 {
	if m != nil {
		return m.SID
	}
	return 0
}

func (m *RespDeliver) GetAt() int64 {
	if m != nil {
		return m.At
	}
	return 0
}

type ReqPing struct {
}

func (m *ReqPing) Reset()                    { *m = ReqPing{} }
func (*ReqPing) ProtoMessage()               {}
func (*ReqPing) Descriptor() ([]byte, []int) { return fileDescriptorMessage, []int{11} }

type RespPing struct {
}

func (m *RespPing) Reset()                    { *m = RespPing{} }
func (*RespPing) ProtoMessage()               {}
func (*RespPing) Descriptor() ([]byte, []int) { return fileDescriptorMessage, []int{12} }

type Consumer struct {
	ID       string `protobuf:"bytes,1,opt,name=ID,proto3" json:"id,omitempty" bson:"id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=Name,proto3" json:"name,omitempty" bson:"name,omitempty"`
	Avartar  string `protobuf:"bytes,3,opt,name=Avartar,proto3" json:"avartar,omitempty" bson:"avartar,omitempty"`
	UpdateAt int64  `protobuf:"varint,4,opt,name=UpdateAt,proto3" json:"update_at,omitempty" bson:"update_at,omitempty"`
}

func (m *Consumer) Reset()                    { *m = Consumer{} }
func (*Consumer) ProtoMessage()               {}
func (*Consumer) Descriptor() ([]byte, []int) { return fileDescriptorMessage, []int{13} }

func (m *Consumer) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Consumer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Consumer) GetAvartar() string {
	if m != nil {
		return m.Avartar
	}
	return ""
}

func (m *Consumer) GetUpdateAt() int64 {
	if m != nil {
		return m.UpdateAt
	}
	return 0
}

type Topic struct {
	ID       string `protobuf:"bytes,1,opt,name=ID,proto3" json:"id,omitempty" bson:"id,omitempty"`
	Title    string `protobuf:"bytes,2,opt,name=Title,proto3" json:"title,omitempty" bson:"title,omitempty"`
	Avartar  string `protobuf:"bytes,3,opt,name=Avartar,proto3" json:"avartar,omitempty" bson:"avartar,omitempty"`
	UpdateAt int64  `protobuf:"varint,4,opt,name=UpdateAt,proto3" json:"update_at,omitempty" bson:"update_at,omitempty"`
	Group    bool   `protobuf:"varint,5,opt,name=Group,proto3" json:"group,omitempty" bson:"group,omitempty"`
}

func (m *Topic) Reset()                    { *m = Topic{} }
func (*Topic) ProtoMessage()               {}
func (*Topic) Descriptor() ([]byte, []int) { return fileDescriptorMessage, []int{14} }

func (m *Topic) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Topic) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Topic) GetAvartar() string {
	if m != nil {
		return m.Avartar
	}
	return ""
}

func (m *Topic) GetUpdateAt() int64 {
	if m != nil {
		return m.UpdateAt
	}
	return 0
}

func (m *Topic) GetGroup() bool {
	if m != nil {
		return m.Group
	}
	return false
}

type Message struct {
	CID  string    `protobuf:"bytes,1,opt,name=CID,proto3" json:"cid,omitempty" bson:"cid,omitempty"`
	SID  int64     `protobuf:"varint,2,opt,name=SID,proto3" json:"sid,omitempty" bson:"sid,omitempty"`
	From *Consumer `protobuf:"bytes,3,opt,name=From" json:"from,omitempty" bson:"from,omitempty"`
	To   *Topic    `protobuf:"bytes,4,opt,name=To" json:"to,omitempty" bson:"to,omitempty"`
	At   int64     `protobuf:"varint,5,opt,name=At,proto3" json:"at,omitempty" bson:"at,omitempty"`
	Body string    `protobuf:"bytes,6,opt,name=Body,proto3" json:"body,omitempty" bson:"content,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptorMessage, []int{15} }

func (m *Message) GetCID() string {
	if m != nil {
		return m.CID
	}
	return ""
}

func (m *Message) GetSID() int64 {
	if m != nil {
		return m.SID
	}
	return 0
}

func (m *Message) GetFrom() *Consumer {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *Message) GetTo() *Topic {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *Message) GetAt() int64 {
	if m != nil {
		return m.At
	}
	return 0
}

func (m *Message) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func init() {
	proto.RegisterType((*ReqLogin)(nil), "pr.ReqLogin")
	proto.RegisterType((*RespLogin)(nil), "pr.RespLogin")
	proto.RegisterType((*ReqLogout)(nil), "pr.ReqLogout")
	proto.RegisterType((*RespLogout)(nil), "pr.RespLogout")
	proto.RegisterType((*ReqSubscribe)(nil), "pr.ReqSubscribe")
	proto.RegisterType((*RespSubscribe)(nil), "pr.RespSubscribe")
	proto.RegisterType((*ReqUnsubscribe)(nil), "pr.ReqUnsubscribe")
	proto.RegisterType((*RespUnsubscribe)(nil), "pr.RespUnsubscribe")
	proto.RegisterType((*EmitSend)(nil), "pr.EmitSend")
	proto.RegisterType((*ReqDeliver)(nil), "pr.ReqDeliver")
	proto.RegisterType((*RespDeliver)(nil), "pr.RespDeliver")
	proto.RegisterType((*ReqPing)(nil), "pr.ReqPing")
	proto.RegisterType((*RespPing)(nil), "pr.RespPing")
	proto.RegisterType((*Consumer)(nil), "pr.Consumer")
	proto.RegisterType((*Topic)(nil), "pr.Topic")
	proto.RegisterType((*Message)(nil), "pr.Message")
	proto.RegisterEnum("pr.Err", Err_name, Err_value)
	proto.RegisterEnum("pr.Type", Type_name, Type_value)
}
func (m *ReqLogin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqLogin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.UserID)))
		i += copy(dAtA[i:], m.UserID)
	}
	if len(m.Password) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Password)))
		i += copy(dAtA[i:], m.Password)
	}
	if len(m.Platform) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Platform)))
		i += copy(dAtA[i:], m.Platform)
	}
	return i, nil
}

func (m *RespLogin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespLogin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.Code))
	}
	if len(m.Desc) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Desc)))
		i += copy(dAtA[i:], m.Desc)
	}
	return i, nil
}

func (m *ReqLogout) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqLogout) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RespLogout) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespLogout) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.Code))
	}
	if len(m.Desc) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Desc)))
		i += copy(dAtA[i:], m.Desc)
	}
	return i, nil
}

func (m *ReqSubscribe) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqSubscribe) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TopicID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.TopicID)))
		i += copy(dAtA[i:], m.TopicID)
	}
	if m.MinSID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.MinSID))
	}
	if m.MaxCount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.MaxCount))
	}
	return i, nil
}

func (m *RespSubscribe) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespSubscribe) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.Code))
	}
	if len(m.Desc) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Desc)))
		i += copy(dAtA[i:], m.Desc)
	}
	if len(m.Histories) > 0 {
		for _, msg := range m.Histories {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintMessage(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ReqUnsubscribe) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqUnsubscribe) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TopicID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.TopicID)))
		i += copy(dAtA[i:], m.TopicID)
	}
	return i, nil
}

func (m *RespUnsubscribe) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespUnsubscribe) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.Code))
	}
	if len(m.Desc) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Desc)))
		i += copy(dAtA[i:], m.Desc)
	}
	return i, nil
}

func (m *EmitSend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EmitSend) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Message != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.Message.Size()))
		n1, err := m.Message.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *ReqDeliver) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqDeliver) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Message != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.Message.Size()))
		n2, err := m.Message.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *RespDeliver) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespDeliver) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.Code))
	}
	if len(m.Desc) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Desc)))
		i += copy(dAtA[i:], m.Desc)
	}
	if m.SID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.SID))
	}
	if m.At != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.At))
	}
	return i, nil
}

func (m *ReqPing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqPing) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RespPing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespPing) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Consumer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Consumer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Avartar) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Avartar)))
		i += copy(dAtA[i:], m.Avartar)
	}
	if m.UpdateAt != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.UpdateAt))
	}
	return i, nil
}

func (m *Topic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Topic) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Avartar) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Avartar)))
		i += copy(dAtA[i:], m.Avartar)
	}
	if m.UpdateAt != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.UpdateAt))
	}
	if m.Group {
		dAtA[i] = 0x28
		i++
		if m.Group {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.CID)))
		i += copy(dAtA[i:], m.CID)
	}
	if m.SID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.SID))
	}
	if m.From != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.From.Size()))
		n3, err := m.From.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.To != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.To.Size()))
		n4, err := m.To.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.At != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.At))
	}
	if len(m.Body) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Body)))
		i += copy(dAtA[i:], m.Body)
	}
	return i, nil
}

func encodeFixed64Message(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Message(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ReqLogin) Size() (n int) {
	var l int
	_ = l
	l = len(m.UserID)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *RespLogin) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovMessage(uint64(m.Code))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *ReqLogout) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *RespLogout) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovMessage(uint64(m.Code))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *ReqSubscribe) Size() (n int) {
	var l int
	_ = l
	l = len(m.TopicID)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.MinSID != 0 {
		n += 1 + sovMessage(uint64(m.MinSID))
	}
	if m.MaxCount != 0 {
		n += 1 + sovMessage(uint64(m.MaxCount))
	}
	return n
}

func (m *RespSubscribe) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovMessage(uint64(m.Code))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if len(m.Histories) > 0 {
		for _, e := range m.Histories {
			l = e.Size()
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	return n
}

func (m *ReqUnsubscribe) Size() (n int) {
	var l int
	_ = l
	l = len(m.TopicID)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *RespUnsubscribe) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovMessage(uint64(m.Code))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *EmitSend) Size() (n int) {
	var l int
	_ = l
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *ReqDeliver) Size() (n int) {
	var l int
	_ = l
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *RespDeliver) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovMessage(uint64(m.Code))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.SID != 0 {
		n += 1 + sovMessage(uint64(m.SID))
	}
	if m.At != 0 {
		n += 1 + sovMessage(uint64(m.At))
	}
	return n
}

func (m *ReqPing) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *RespPing) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *Consumer) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Avartar)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.UpdateAt != 0 {
		n += 1 + sovMessage(uint64(m.UpdateAt))
	}
	return n
}

func (m *Topic) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Avartar)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.UpdateAt != 0 {
		n += 1 + sovMessage(uint64(m.UpdateAt))
	}
	if m.Group {
		n += 2
	}
	return n
}

func (m *Message) Size() (n int) {
	var l int
	_ = l
	l = len(m.CID)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.SID != 0 {
		n += 1 + sovMessage(uint64(m.SID))
	}
	if m.From != nil {
		l = m.From.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.To != nil {
		l = m.To.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.At != 0 {
		n += 1 + sovMessage(uint64(m.At))
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func sovMessage(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ReqLogin) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReqLogin{`,
		`UserID:` + fmt.Sprintf("%v", this.UserID) + `,`,
		`Password:` + fmt.Sprintf("%v", this.Password) + `,`,
		`Platform:` + fmt.Sprintf("%v", this.Platform) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RespLogin) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RespLogin{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Desc:` + fmt.Sprintf("%v", this.Desc) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReqLogout) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReqLogout{`,
		`}`,
	}, "")
	return s
}
func (this *RespLogout) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RespLogout{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Desc:` + fmt.Sprintf("%v", this.Desc) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReqSubscribe) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReqSubscribe{`,
		`TopicID:` + fmt.Sprintf("%v", this.TopicID) + `,`,
		`MinSID:` + fmt.Sprintf("%v", this.MinSID) + `,`,
		`MaxCount:` + fmt.Sprintf("%v", this.MaxCount) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RespSubscribe) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RespSubscribe{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Desc:` + fmt.Sprintf("%v", this.Desc) + `,`,
		`Histories:` + strings.Replace(fmt.Sprintf("%v", this.Histories), "Message", "Message", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReqUnsubscribe) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReqUnsubscribe{`,
		`TopicID:` + fmt.Sprintf("%v", this.TopicID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RespUnsubscribe) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RespUnsubscribe{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Desc:` + fmt.Sprintf("%v", this.Desc) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EmitSend) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EmitSend{`,
		`Message:` + strings.Replace(fmt.Sprintf("%v", this.Message), "Message", "Message", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReqDeliver) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReqDeliver{`,
		`Message:` + strings.Replace(fmt.Sprintf("%v", this.Message), "Message", "Message", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RespDeliver) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RespDeliver{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Desc:` + fmt.Sprintf("%v", this.Desc) + `,`,
		`SID:` + fmt.Sprintf("%v", this.SID) + `,`,
		`At:` + fmt.Sprintf("%v", this.At) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReqPing) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReqPing{`,
		`}`,
	}, "")
	return s
}
func (this *RespPing) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RespPing{`,
		`}`,
	}, "")
	return s
}
func (this *Consumer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Consumer{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Avartar:` + fmt.Sprintf("%v", this.Avartar) + `,`,
		`UpdateAt:` + fmt.Sprintf("%v", this.UpdateAt) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Topic) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Topic{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`Avartar:` + fmt.Sprintf("%v", this.Avartar) + `,`,
		`UpdateAt:` + fmt.Sprintf("%v", this.UpdateAt) + `,`,
		`Group:` + fmt.Sprintf("%v", this.Group) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Message) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Message{`,
		`CID:` + fmt.Sprintf("%v", this.CID) + `,`,
		`SID:` + fmt.Sprintf("%v", this.SID) + `,`,
		`From:` + strings.Replace(fmt.Sprintf("%v", this.From), "Consumer", "Consumer", 1) + `,`,
		`To:` + strings.Replace(fmt.Sprintf("%v", this.To), "Topic", "Topic", 1) + `,`,
		`At:` + fmt.Sprintf("%v", this.At) + `,`,
		`Body:` + fmt.Sprintf("%v", this.Body) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMessage(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ReqLogin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqLogin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqLogin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespLogin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespLogin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespLogin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqLogout) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqLogout: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqLogout: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespLogout) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespLogout: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespLogout: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqSubscribe) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqSubscribe: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqSubscribe: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinSID", wireType)
			}
			m.MinSID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinSID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCount", wireType)
			}
			m.MaxCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxCount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespSubscribe) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespSubscribe: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespSubscribe: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Histories", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Histories = append(m.Histories, &Message{})
			if err := m.Histories[len(m.Histories)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqUnsubscribe) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqUnsubscribe: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqUnsubscribe: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespUnsubscribe) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespUnsubscribe: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespUnsubscribe: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EmitSend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmitSend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmitSend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &Message{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqDeliver) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqDeliver: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqDeliver: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &Message{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespDeliver) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespDeliver: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespDeliver: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SID", wireType)
			}
			m.SID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field At", wireType)
			}
			m.At = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.At |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqPing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqPing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqPing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespPing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespPing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespPing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Consumer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Consumer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Consumer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avartar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avartar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateAt", wireType)
			}
			m.UpdateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Topic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Topic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Topic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avartar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avartar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateAt", wireType)
			}
			m.UpdateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Group = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SID", wireType)
			}
			m.SID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.From == nil {
				m.From = &Consumer{}
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.To == nil {
				m.To = &Topic{}
			}
			if err := m.To.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field At", wireType)
			}
			m.At = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.At |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMessage(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMessage = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/emsihyo/go.im/comps/pr/message.proto", fileDescriptorMessage)
}

var fileDescriptorMessage = []byte{
	// 890 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0xcd, 0x6e, 0x23, 0x45,
	0x10, 0xce, 0xcc, 0xf8, 0xb7, 0x9c, 0x1f, 0xa7, 0x17, 0x56, 0x56, 0x0e, 0x76, 0xd4, 0x12, 0x22,
	0x1b, 0x58, 0x5b, 0x9b, 0x80, 0x56, 0x2c, 0x07, 0xe4, 0x9f, 0x65, 0x15, 0x81, 0x97, 0xa5, 0xe3,
	0x68, 0x25, 0x84, 0x40, 0xe3, 0x71, 0x67, 0x32, 0x52, 0x66, 0x7a, 0xdc, 0xdd, 0x13, 0xf0, 0x8d,
	0x23, 0x77, 0x5e, 0x00, 0x21, 0x1e, 0x86, 0x23, 0x47, 0x4e, 0x16, 0xe4, 0xe8, 0x23, 0x4f, 0x80,
	0xba, 0x7b, 0xc6, 0xc9, 0x18, 0x4b, 0x58, 0x9c, 0xf6, 0xd6, 0x55, 0xe5, 0xef, 0x73, 0xd5, 0xd7,
	0xd5, 0x55, 0x03, 0x1d, 0x3f, 0x90, 0x57, 0xc9, 0xb8, 0xed, 0xb1, 0xb0, 0x43, 0x43, 0x11, 0x5c,
	0xcd, 0x58, 0xc7, 0x67, 0xed, 0x20, 0xec, 0x78, 0x2c, 0x8c, 0x45, 0x27, 0xe6, 0x9d, 0x90, 0x0a,
	0xe1, 0xfa, 0xb4, 0x1d, 0x73, 0x26, 0x19, 0xb2, 0x63, 0x7e, 0xf0, 0xf8, 0x1e, 0xc8, 0x67, 0x3e,
	0xeb, 0xe8, 0xd0, 0x38, 0xb9, 0xd4, 0x96, 0x36, 0xf4, 0xc9, 0x40, 0xf0, 0x57, 0x50, 0x21, 0x74,
	0xfa, 0x39, 0xf3, 0x83, 0x08, 0x3d, 0x84, 0xd2, 0x85, 0xa0, 0xfc, 0x6c, 0xd0, 0xb0, 0x0e, 0xad,
	0xa3, 0x2a, 0x49, 0x2d, 0x74, 0x00, 0x95, 0x57, 0xae, 0x10, 0xdf, 0x31, 0x3e, 0x69, 0xd8, 0x3a,
	0xb2, 0xb4, 0x75, 0xec, 0xda, 0x95, 0x97, 0x8c, 0x87, 0x0d, 0x27, 0x8d, 0xa5, 0x36, 0x3e, 0x85,
	0x2a, 0xa1, 0x22, 0x36, 0xe4, 0x08, 0x0a, 0x7d, 0x36, 0xa1, 0x9a, 0xba, 0x48, 0xf4, 0x59, 0xf9,
	0x06, 0x54, 0x78, 0x29, 0xa9, 0x3e, 0xe3, 0x9a, 0x02, 0xa9, 0x84, 0x58, 0x22, 0xf1, 0x07, 0x00,
	0x29, 0x03, 0x4b, 0xe4, 0xc6, 0x14, 0x5f, 0xc3, 0x36, 0xa1, 0xd3, 0xf3, 0x64, 0x2c, 0x3c, 0x1e,
	0x8c, 0x29, 0x6a, 0x40, 0x79, 0xc4, 0xe2, 0xc0, 0x5b, 0x16, 0x96, 0x99, 0xaa, 0xe2, 0x61, 0x10,
	0x9d, 0x9f, 0x0d, 0x34, 0xde, 0x21, 0xa9, 0xa5, 0xaa, 0x1a, 0xba, 0xdf, 0xf7, 0x59, 0x12, 0x49,
	0x5d, 0x95, 0x43, 0x96, 0x36, 0x1e, 0xc3, 0x8e, 0xca, 0xe9, 0x8e, 0x7e, 0xc3, 0xb4, 0xd0, 0x23,
	0xa8, 0x5e, 0x05, 0x42, 0x32, 0x1e, 0x50, 0xd1, 0x70, 0x0e, 0x9d, 0xa3, 0xda, 0x49, 0xad, 0x1d,
	0xf3, 0xf6, 0xd0, 0xdc, 0x21, 0xb9, 0x8b, 0xe2, 0x63, 0xd8, 0x25, 0x74, 0x7a, 0x11, 0x89, 0xff,
	0xae, 0x01, 0x7f, 0x04, 0x7b, 0x2a, 0x9f, 0xfb, 0x3f, 0xde, 0x54, 0xa8, 0x27, 0x50, 0x79, 0x1e,
	0x06, 0xf2, 0x9c, 0x46, 0x13, 0xf4, 0x0e, 0x94, 0xd3, 0x44, 0x34, 0x6c, 0x25, 0xb7, 0x2c, 0x86,
	0x4f, 0xd5, 0x8d, 0x4c, 0x07, 0xf4, 0x3a, 0xb8, 0xa1, 0x7c, 0x53, 0xd0, 0x6b, 0xa8, 0xa9, 0x14,
	0x33, 0xd4, 0xa6, 0x82, 0xd5, 0xc1, 0x51, 0x57, 0x63, 0x2e, 0x40, 0x1d, 0xd1, 0x2e, 0xd8, 0x5d,
	0xd9, 0x28, 0x68, 0x87, 0xdd, 0x95, 0xb8, 0x0a, 0x65, 0x42, 0xa7, 0xaf, 0x82, 0xc8, 0xc7, 0xa0,
	0x1a, 0x59, 0xc4, 0xfa, 0xfc, 0xab, 0x0d, 0x95, 0x3e, 0x8b, 0x44, 0x12, 0x52, 0x8e, 0x9e, 0x82,
	0x9d, 0x89, 0xd6, 0x7b, 0x77, 0x31, 0x6f, 0x6d, 0x07, 0x93, 0xf7, 0x59, 0x18, 0x48, 0x1a, 0xc6,
	0x72, 0xf6, 0xf7, 0xbc, 0xf5, 0x60, 0x2c, 0x58, 0xf4, 0x0c, 0xdf, 0xf7, 0x62, 0x62, 0x9f, 0x0d,
	0xd0, 0x27, 0x50, 0x78, 0xe9, 0x86, 0xd4, 0xa4, 0xd4, 0x7b, 0x6f, 0x31, 0x6f, 0xed, 0x46, 0x6e,
	0x48, 0x73, 0xe0, 0xb7, 0x0d, 0x38, 0xef, 0xc7, 0x44, 0x03, 0xd1, 0x67, 0x50, 0xee, 0xde, 0xb8,
	0x5c, 0xba, 0xdc, 0x3c, 0x8d, 0xde, 0x93, 0xc5, 0xbc, 0xb5, 0xef, 0x1a, 0x57, 0x8e, 0xa6, 0x61,
	0x68, 0xfe, 0x15, 0xc2, 0x24, 0x63, 0x40, 0x5f, 0x42, 0xe5, 0x22, 0x9e, 0xb8, 0x92, 0x66, 0x02,
	0xf4, 0x3e, 0x5c, 0xcc, 0x5b, 0x0f, 0x12, 0xed, 0xfb, 0xd6, 0x95, 0x39, 0xbe, 0x03, 0xc3, 0xb7,
	0x26, 0x88, 0xc9, 0x92, 0x06, 0x2f, 0x6c, 0x28, 0xea, 0x2e, 0xfa, 0xff, 0x1a, 0xf5, 0xa1, 0x38,
	0x0a, 0xe4, 0x75, 0x26, 0xd2, 0xe3, 0xc5, 0xbc, 0xb5, 0x27, 0x95, 0x23, 0x07, 0x7f, 0x68, 0xe0,
	0x2b, 0x01, 0x4c, 0x0c, 0xf6, 0x4d, 0xd7, 0x49, 0x15, 0xf9, 0x82, 0xb3, 0x24, 0x6e, 0x14, 0x0f,
	0xad, 0xa3, 0x8a, 0x29, 0xd2, 0x57, 0x8e, 0x75, 0x45, 0xae, 0x04, 0x30, 0x31, 0x58, 0xfc, 0x93,
	0xb3, 0x7c, 0x2b, 0xe8, 0x63, 0x70, 0xfa, 0x4b, 0xbd, 0x1f, 0x2d, 0xe6, 0xad, 0x1d, 0x6f, 0x45,
	0xf0, 0xb7, 0x0c, 0x99, 0x97, 0x57, 0x5c, 0xa1, 0x14, 0x78, 0x39, 0xb0, 0x0c, 0x58, 0xac, 0x07,
	0x8b, 0x15, 0xb0, 0x7a, 0x40, 0x43, 0x28, 0x7c, 0xca, 0x99, 0x19, 0xd5, 0xb5, 0x93, 0x6d, 0xf5,
	0x5a, 0xb3, 0x87, 0x62, 0x3a, 0xfc, 0x92, 0xb3, 0x70, 0x5d, 0x87, 0xe7, 0xfd, 0x98, 0x68, 0x1a,
	0xd4, 0x03, 0x7b, 0xc4, 0xb4, 0xcc, 0xb5, 0x93, 0xaa, 0x22, 0xd3, 0xed, 0x64, 0x5a, 0x48, 0xb2,
	0x75, 0x2d, 0x74, 0xdf, 0x8b, 0x89, 0x3d, 0x62, 0xaa, 0xf7, 0xba, 0x52, 0x4b, 0xeb, 0x18, 0xe0,
	0xca, 0x1d, 0xa5, 0xc0, 0xfc, 0xe5, 0xd8, 0x5d, 0x89, 0x7a, 0x50, 0xe8, 0xb1, 0xc9, 0xac, 0x51,
	0xd2, 0x32, 0xb6, 0x55, 0xf6, 0x63, 0x36, 0x99, 0xad, 0x6b, 0x18, 0x8f, 0x45, 0x92, 0x46, 0x39,
	0x06, 0x8d, 0x3d, 0x7e, 0x0a, 0xce, 0x73, 0xce, 0xd1, 0x1e, 0xd4, 0xcc, 0xae, 0x7b, 0xcd, 0x59,
	0xe4, 0xd7, 0xb7, 0xd0, 0x3e, 0xec, 0x64, 0x2b, 0xce, 0xb8, 0x2c, 0xb4, 0x0d, 0x95, 0x97, 0x4c,
	0xea, 0x65, 0x56, 0xb7, 0x8f, 0xbf, 0x81, 0xc2, 0x68, 0x16, 0x53, 0x54, 0x81, 0x82, 0x1a, 0x39,
	0xf5, 0x2d, 0x54, 0x85, 0xa2, 0x09, 0x5a, 0x08, 0xa0, 0x64, 0x56, 0x56, 0xdd, 0x46, 0x3b, 0x50,
	0x5d, 0xae, 0x8a, 0xba, 0xa3, 0xff, 0xe9, 0x6e, 0x52, 0xd7, 0x0b, 0x8a, 0x40, 0xcd, 0xdf, 0x7a,
	0x11, 0xd5, 0xa0, 0x9c, 0x4e, 0xc8, 0x7a, 0xa9, 0xf7, 0xec, 0x8f, 0xbf, 0x9a, 0x5b, 0x3f, 0xdc,
	0x36, 0xad, 0xdf, 0x6e, 0x9b, 0xd6, 0xef, 0xb7, 0x4d, 0xeb, 0xcf, 0xdb, 0xa6, 0x05, 0xfb, 0x1e,
	0x0b, 0xdb, 0xe9, 0xa7, 0x40, 0x5b, 0x7f, 0x0a, 0xf4, 0x0a, 0x2f, 0xbe, 0x38, 0x1b, 0xfe, 0x68,
	0x59, 0x3f, 0x5b, 0xd6, 0x2f, 0xb6, 0x36, 0xc6, 0x25, 0xbd, 0xda, 0x4f, 0xff, 0x09, 0x00, 0x00,
	0xff, 0xff, 0x7f, 0x21, 0xe2, 0x45, 0x40, 0x08, 0x00, 0x00,
}
